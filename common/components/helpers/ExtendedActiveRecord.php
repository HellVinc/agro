<?phpnamespace common\components\helpers;use Yii;use yii\db\ActiveRecord;use yii\helpers\ArrayHelper;/** * Class ExtendedActiveRecord * @package common\components\helpers * * @property string $className */class ExtendedActiveRecord extends ActiveRecord{    const STATUS_ACTIVE = 10;    const STATUS_DELETED = 0;    const FIELD_NAME = 'status';    /**     * @var array validation errors (attribute name => array of errors)     */    private $_errors;    /**     * @param $models     * @param array $attributes     * @return array     */    public static function getFields($models, array $attributes = []) {        if (count($attributes)) {            return ArrayHelper::toArray(                $models, [self::className() => $attributes]            );        }        if (!is_array($models) && is_object($models)) {            $models = [$models];        }        return array_map(function ($model) {            return Yii::createObject('yii\rest\Serializer')->serialize($model);        }, $models);    }    /**     * @return array     */    public function oneFields()    {        return [            strtolower($this->getClassName()) => self::getFields($this),        ];    }    /**     * @param $result     * @return array     */    public static function allFields($result)    {        return self::getFields($result);    }    /**     * @param int $newStatus     * @return mixed     */    public function setStatus($newStatus)    {        $name = self::FIELD_NAME;        return $this->$name = $newStatus;    }    /**     * This method set 'status' = STATUS_DELETED     * @param bool $softDelete     * @return bool|array     * @throws \Exception     */    public function delete($softDelete = true)    {        if ($softDelete && self::STATUS_ACTIVE) {            $this->setStatus(self::STATUS_DELETED);            return $this->save() ? true : $this->errors;        }        return parent::delete();    }    /**     * @return bool||string     */    public function errors()    {        foreach ($this->getErrors() as $error) {            return is_string($error) ? $error : $error[0];        }        return false;    }    public function getClassName()    {        $namespace = get_class($this);        $name = explode("\\", $namespace);        return end($name);    }}